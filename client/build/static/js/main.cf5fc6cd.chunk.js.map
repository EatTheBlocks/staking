{"version":3,"sources":["logo.png","getWeb3.js","context/BlockchainContext.js","context/DisplayContext.js","components/NavBar.js","components/AdminPanel.js","components/UserPanel/TimeLeftField.js","components/UserPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","a","window","ethereum","web3","Web3","request","method","code","console","log","provider","providers","HttpProvider","connectToWallet","React","createContext","undefined","NavBar","blockchainContext","useContext","BlockchainContext","accounts","AddressView","substring","length","className","alt","src","require","width","height","AdminPanel","displayContext","DisplayContext","stakerContract","rewardTokenContract","userDetails","refreshUserDetails","onInputNumberChange","isNonZeroNumber","toast","useState","inputAdminRewards","setInputAdminRewards","inputAdminDuration","setInputAdminDuration","info","parseFloat","error","dismiss","amount","utils","toWei","days","position","autoClose","methods","approve","options","address","toString","send","from","addRewards","Container","Form","Control","key","placeholder","value","onChange","e","Button","onClick","variant","TimeLeftField","extractTime","part","daysLeft","Math","floor","UserPanel","depositTokenContract","inputStake","setInputStake","inputUnstake","setInputUnstake","deposit","withdraw","claim","numberToFixed","n","toFixed","CardKeyValue","props","label","RewardsPhaseFinished","RewardsPhaseActive","OverlayTrigger","placement","overlay","Tooltip","App","setWeb3","setAccounts","setStakerContract","setDepositTokenContract","setRewardTokenContract","setUserDetails","owner","setOwner","isGlobalLoading","setIsGlobalLoading","isConnectingToWallet","setIsConnectingToWallet","initConnection","networkId","deployedNetwork","StakerContract","networks","instance","eth","Contract","abi","depositToken","call","depositTokenAddr","depositContract","ERC20ABI","rewardToken","rewardTokenAddr","rewardContract","on","_accounts","includes","alert","getFrontendView","res","balanceOf","depBalance","rewardBalance","symbol","depSymbol","rewSymbol","parsed","rewardPerDay","deposited","fromWei","pending","depositTokenBalance","rewardTokenBalance","useEffect","load","MainView","style","display","toLowerCase","MainViewOrConnectView","disabled","LoadingView","Spinner","animation","Provider","f","re","RegExp","target","test","_input","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","transition","Slide","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf5fc6cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8c4db20c.png\";","import Web3 from \"web3\";\n\nasync function connectToWallet() {\n  if (window.ethereum) {\n    const web3 = new Web3(window.ethereum);\n    try {\n      // Request account access if needed\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      // Accounts now exposed\n      return(web3);\n    } catch (error) {\n      if (error.code === 4001) {\n        //alert(\"Please approve wallet connection if you wish to use the application.\");\n      }\n      throw(error);\n    }\n  }\n  // Legacy dapp browsers...\n  else if (window.web3) {\n    // Use Mist/MetaMask's provider.\n    const web3 = window.web3;\n    console.log(\"Injected web3 detected.\");\n    return(web3);\n  }\n  // Fallback to localhost; use dev console port by default...\n  else {\n    const provider = new Web3.providers.HttpProvider(\n      \"http://127.0.0.1:8545\"\n    );\n    const web3 = new Web3(provider);\n    console.log(\"No web3 instance injected, using Local web3.\");\n    return(web3);\n  }\n}\n\nexport default connectToWallet;\n","import React from \"react\";\nexport default React.createContext(undefined);","import React from \"react\";\nexport default React.createContext(undefined);","import React, {useContext} from \"react\";\n\nimport BlockchainContext from \"../context/BlockchainContext\";\n\n\nexport default function NavBar() {\n    const blockchainContext = useContext(BlockchainContext);\n    const { web3, accounts } = blockchainContext;\n\n    const AddressView = () => (\n        <>\n            Connected: {accounts? accounts[0].substring(0,6) : undefined}...{accounts? accounts[0].substring(accounts[0].length-4,accounts[0].length) : undefined}\n        </>\n    )\n\n    return (\n        <>\n            <div className=\"minimalistic-nav-bar\">\n                <div>\n                <img\n                    alt=\"\"\n                    src={require('../logo.png')}\n                    width=\"300px\"\n                    height=\"27px\"\n                    className=\"d-inline-block align-top\"\n                />\n                </div>\n                <div>\n                STAKE\n                </div>\n                <div>\n                {web3? <AddressView />: 'Not connected'}\n                \n                </div>\n            </div>\n        </>\n    )\n}","import React, {useContext, useState} from \"react\";\n\nimport BlockchainContext from \"../context/BlockchainContext\";\nimport DisplayContext from \"../context/DisplayContext\";\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\n\n\n\nexport default function AdminPanel() {\n    const blockchainContext = useContext(BlockchainContext);\n    const displayContext = useContext(DisplayContext);\n    const { web3, accounts, stakerContract, rewardTokenContract } = blockchainContext;\n    const {userDetails, refreshUserDetails, onInputNumberChange, isNonZeroNumber, toast} = displayContext;\n\n    const [inputAdminRewards, setInputAdminRewards] = useState('');\n    const [inputAdminDuration, setInputAdminDuration] = useState('');\n\n    async function addRewards() {\n        if (userDetails[\"daysLeft\"] !== 0.) {\n            toast.info(\"Can't add rewards in middle of campaign. Please wait for campaign to finish.\");\n            return;\n        }\n        if (!(isNonZeroNumber(inputAdminRewards) && isNonZeroNumber(inputAdminDuration))) {\n            toast.info('Please add missing input.');\n            return;\n        }\n        if (parseFloat(inputAdminRewards) > parseFloat(userDetails[\"rewardTokenBalance\"])) {\n            toast.error(\"Not enough balance.\");\n            return;\n        }\n        toast.dismiss();\n        let amount = web3.utils.toWei(inputAdminRewards);\n        let days = inputAdminDuration;\n        try {\n            toast.info('Please approve transaction 1 of 2 (allowance)...', {position: 'top-left', autoClose: false});\n            await rewardTokenContract.methods.approve(stakerContract.options.address, amount.toString()).send({ from: accounts[0] });\n            toast.dismiss();\n            toast.info('Please approve transaction 2 of 2 (add rewards)...', {position: 'top-left', autoClose: false});\n            await stakerContract.methods.addRewards(amount.toString(), days).send({ from: accounts[0] });\n        } finally {\n            toast.dismiss();\n        }\n        \n        await refreshUserDetails();\n    }\n\n    return (\n        <>\n            <Container className=\"square inner-container\">\n                <br/>\n                Admin :: Add {userDetails[\"rewSymbol\"]} Rewards\n                <hr/>\n\n                <br/>Amount<br/>\n                <div className=\"label-above-button\">\n                    Available {userDetails[\"rewSymbol\"]} balance to transfer: {userDetails[\"rewardTokenBalance\"]}\n                </div>\n                <div className=\"input-button-container\">\n                    <Form.Control key=\"a1\" placeholder=\"Amount\" value={inputAdminRewards} onChange={(e) => {onInputNumberChange(e, setInputAdminRewards)}}/>\n                </div>         \n                <br/><hr/>\n\n                <br/>Duration (in days)<br/>\n                <div className=\"input-button-container\">\n                    <Form.Control placeholder=\"Days\" value={inputAdminDuration} onChange={(e) => {onInputNumberChange(e, setInputAdminDuration)}}/>\n                </div>\n                <br/><hr/>\n\n                <div className=\"button-stretch\">\n                    <br/><Button onClick={addRewards} variant=\"secondary\">Add</Button><br/>\n                </div>\n                <br/>\n            </Container>\n        </>\n    )\n}","import React, {useContext} from \"react\";\nimport DisplayContext from \"../../context/DisplayContext\";\n\n\n\nexport default function TimeLeftField() {\n    const displayContext = useContext(DisplayContext);\n    const {userDetails} = displayContext;\n\n\n    function extractTime(part) {\n      if (userDetails[\"daysLeft\"] === undefined)\n        return \"\";\n        \n      let daysLeft = userDetails[\"daysLeft\"];\n      if (part === \"d\")\n        return Math.floor(daysLeft);\n      if (part === \"h\")\n        return Math.floor((daysLeft - Math.floor(daysLeft)) * 24);\n      if (part === \"m\")\n        return Math.floor((daysLeft - Math.floor(daysLeft) - Math.floor(daysLeft - Math.floor(daysLeft))) * 60);\n      return undefined;\n      }\n\n    return (\n        <>\n            <div className=\"time-left-label\">\n                <div>\n                Time Left\n                </div>\n                <div className=\"time\">\n                <div>\n                    <div>\n                    {extractTime(\"d\")}\n                    </div>\n                    <div>\n                    days\n                    </div>\n                </div>\n                <div>\n                    <div>\n                    {extractTime(\"h\")}\n                    </div>\n                    <div>\n                    hours\n                    </div>\n                </div>\n                <div>\n                    <div>\n                    {extractTime(\"m\")}\n                    </div>\n                    <div>\n                    mins\n                    </div>\n                </div>\n                </div>\n            </div>\n            <hr/>\n        </>\n    )\n}","import React, {useContext, useState} from \"react\";\nimport BlockchainContext from \"../context/BlockchainContext\";\n\nimport DisplayContext from \"../context/DisplayContext\";\n\nimport TimeLeftField from \"./UserPanel/TimeLeftField\";\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\n\n\nexport default function UserPanel() {\n    const blockchainContext = useContext(BlockchainContext);\n    const displayContext = useContext(DisplayContext);\n    const { web3, accounts, stakerContract, depositTokenContract } = blockchainContext;\n    const {userDetails, refreshUserDetails, onInputNumberChange, isNonZeroNumber, toast} = displayContext;\n\n    const [inputStake, setInputStake] = useState('');\n    const [inputUnstake, setInputUnstake] = useState('');\n\n    async function deposit() {\n        if (!isNonZeroNumber(inputStake)) {\n            toast.error('No amount entered.');\n            return;\n        }\n        if (parseFloat(inputStake) > parseFloat(userDetails[\"depositTokenBalance\"])) {\n            console.log(typeof inputStake);\n            toast.error(\"Not enough balance.\");\n            return;\n        }\n        toast.dismiss();\n        let amount = web3.utils.toWei(inputStake.toString());\n        try {\n            toast.info('Please approve transaction 1 of 2 (allowance)...', {position: 'top-left', autoClose: false});\n            await depositTokenContract.methods.approve(stakerContract.options.address, amount.toString()).send({ from: accounts[0] });\n            toast.dismiss();\n            toast.info('Please approve transaction 2 of 2 (staking)...', {position: 'top-left', autoClose: false});\n            await stakerContract.methods.deposit(amount).send({ from: accounts[0] });\n        } finally {\n            toast.dismiss();\n        }\n        setInputStake(\"\");\n        await refreshUserDetails();\n    }\n    \n      \n    async function withdraw() {\n        if (!isNonZeroNumber(inputUnstake)) {\n            toast.error('No amount entered.');\n            return;\n        }\n        if (parseFloat(inputUnstake) > parseFloat(userDetails[\"deposited\"])) {\n            toast.error(\"Can't unstake more than staked.\");\n            return;\n        }\n        toast.dismiss();\n        let amount = web3.utils.toWei(inputUnstake.toString());\n        toast.info('Please approve transaction...', {position: 'top-left', autoClose: false});\n        try {\n            await stakerContract.methods.withdraw(amount).send({ from: accounts[0] });\n        } finally {\n            toast.dismiss();\n        }\n        setInputUnstake(\"\");\n        await refreshUserDetails();\n    }\n    \n    async function claim() {\n        toast.dismiss();\n        toast.info('Please approve transaction...', {position: 'top-left', autoClose: false});\n        try {\n            await stakerContract.methods.claim().send({ from: accounts[0] });\n        } finally {\n            toast.dismiss();\n        }\n        await refreshUserDetails();\n    }\n\n    function numberToFixed(n) {\n        if (n === undefined)\n            return n;\n        return parseFloat(n).toFixed(6);\n    }\n    \n\n    const CardKeyValue = (props) => (\n        <>\n        <div className=\"card-key-value\">\n            <div>\n            {props.label}\n            </div>\n            <div>\n            {props.value}\n            </div>\n        </div><hr/>\n        </>\n    );\n\n    const RewardsPhaseFinished = (props) => (\n        <>\n        <div className=\"two-line-label\">\n            <div>Staking reward period finished</div>\n            <div>Please check back later for next phase</div>\n        </div><hr/>\n        </>\n    );\n\n    const RewardsPhaseActive = (props) => (\n        <>\n            <TimeLeftField />\n            <CardKeyValue label=\"Global rewards per day\" value={numberToFixed(userDetails[\"rewardPerDay\"])} />\n        </>\n    );\n\n    return (\n        <>\n            <Container className=\"square inner-container\">\n                <br/>\n                {isNonZeroNumber(userDetails[\"rewardPerDay\"])? <RewardsPhaseActive /> : <RewardsPhaseFinished/>}\n                <CardKeyValue label=\"Your staked\" value={numberToFixed(userDetails[\"deposited\"])} />\n                <CardKeyValue label=\"Your pending rewards\" value={numberToFixed(userDetails[\"pending\"])} />\n                \n\n                <br/><br/>\n                <div className=\"label-above-button\">\n                    Available {userDetails[\"depSymbol\"]} balance to stake: {userDetails[\"depositTokenBalance\"]}\n                </div>\n                <div className=\"input-button-container\">\n                    <div>\n                        <Form.Control placeholder=\"Amount\" value={inputStake} onChange={(e) => {onInputNumberChange(e, setInputStake)}}/>\n                    </div>\n                    <div>\n                        <OverlayTrigger\n                        placement=\"right\"\n                        overlay={userDetails[\"pending\"] > 0 ? <Tooltip >Will also claim pending rewards</Tooltip> : <></>}>\n                            <Button onClick={deposit} >Stake</Button>\n                        </OverlayTrigger>\n                    </div>\n                </div><br/>\n\n                <div className=\"label-above-button\">\n                    {userDetails[\"depSymbol\"]} staked: {userDetails[\"deposited\"]}\n                </div>\n                <div className=\"input-button-container\">\n                    <div>\n                        <Form.Control placeholder=\"Amount\" value={inputUnstake} onChange={(e) => {onInputNumberChange(e, setInputUnstake)}}/>\n                    </div>\n                    <div>\n                        <OverlayTrigger\n                        placement=\"right\"\n                        overlay={userDetails[\"pending\"] > 0 ? <Tooltip >Will also claim pending rewards</Tooltip> : <></>}>\n                            <Button onClick={withdraw} >Unstake</Button>\n                        </OverlayTrigger>\n                    </div>\n                </div><br/>\n\n                <div className=\"label-above-button\">\n                    Pending {userDetails[\"rewSymbol\"]} rewards: {userDetails[\"pending\"]}\n                </div>\n                <div className=\"button-stretch\">\n                    <Button onClick={claim} >Claim rewards</Button>\n                </div>\n                <br/>\n                </Container>\n        </>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport connectToWallet from \"./getWeb3\";\n\nimport StakerContract from \"./contracts/Staker.json\";\nimport ERC20ABI from \"./ERC20ABI.json\";\nimport BlockchainContext from \"./context/BlockchainContext.js\";\nimport DisplayContext from \"./context/DisplayContext.js\";\n\nimport NavBar from \"./components/NavBar\";\nimport AdminPanel from \"./components/AdminPanel\";\nimport UserPanel from \"./components/UserPanel\";\n\nimport { ToastContainer, toast, Slide } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner'\n\nimport \"./App.css\";\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [stakerContract, setStakerContract] = useState(undefined);\n  const [depositTokenContract, setDepositTokenContract] = useState(undefined);\n  const [rewardTokenContract, setRewardTokenContract] = useState(undefined);\n\n  const [userDetails, setUserDetails] = useState({});\n  const [owner, setOwner] = useState(undefined);\n\n  const [isGlobalLoading, setIsGlobalLoading] = useState(true);\n  const [isConnectingToWallet, setIsConnectingToWallet] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      setIsGlobalLoading(false);\n      /*window.addEventListener(\"load\", async () => {\n        try {\n        }\n        catch(e) {\n\n        }\n      });*/\n    })();\n\n  },[]);\n\n\n  async function initConnection() {\n    try {\n      // Get network provider and web3 instance.\n      setIsConnectingToWallet(true);\n      const web3 = await connectToWallet();\n\n      setIsGlobalLoading(true);\n      // Use web3 to get the user's accounts.\n      const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n\n      // Get the contract instance.\n      const networkId = await window.ethereum.request({ method: 'net_version' });\n      const deployedNetwork = StakerContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        StakerContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const depositTokenAddr = await instance.methods.depositToken().call({ from: accounts[0] });\n      const depositContract = new web3.eth.Contract(ERC20ABI, depositTokenAddr);\n\n      const rewardTokenAddr = await instance.methods.rewardToken().call({ from: accounts[0] });\n      const rewardContract = new web3.eth.Contract(ERC20ABI, rewardTokenAddr);\n\n      setWeb3(web3);\n      setOwner(await instance.methods.owner().call({ from: accounts[0] }));\n      setAccounts(accounts);\n      setStakerContract(instance);\n      setDepositTokenContract(depositContract);\n      setRewardTokenContract(rewardContract);\n\n      window.ethereum.on('accountsChanged', function (_accounts) {\n        if (_accounts.length === 0) {\n          setAccounts(undefined);\n          setWeb3(undefined);\n        }\n        else {\n          setAccounts(_accounts);\n        }\n      });\n        \n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      if (error.code === 4001) {\n        // User denied access to wallet\n        return;\n      }\n      if (error.toString().includes(\"This contract object doesn't have address set yet\")) {\n        toast.error(\"Error: can't load contract. Are you on the right network?\");\n        console.error(error);\n        return;\n      }\n      alert(\"Error: can't load web3 connection. Please check console.\");\n      console.error(error);\n\n    } finally {\n      setIsGlobalLoading(false);\n      setIsConnectingToWallet(false);\n    }\n  }\n  \n\n  useEffect(() => {\n    const load = async() => { \n      await refreshUserDetails();\n    }\n\n    if (typeof web3 !== 'undefined'\n      && typeof accounts !== 'undefined'\n      && typeof stakerContract !== 'undefined'\n      && typeof depositTokenContract !== 'undefined'\n      && typeof rewardTokenContract !== 'undefined') {\n        load();\n      }\n  }, [web3, accounts, stakerContract, depositTokenContract, rewardTokenContract]) // eslint-disable-line react-hooks/exhaustive-deps\n\n\n  async function refreshUserDetails() {\n    setIsGlobalLoading(true);\n    let res = await stakerContract.methods.getFrontendView().call({ from: accounts[0] });\n    let depBalance = await depositTokenContract.methods.balanceOf(accounts[0]).call({ from: accounts[0] });\n    let rewardBalance = await rewardTokenContract.methods.balanceOf(accounts[0]).call({ from: accounts[0] });\n    let depSymbol = await depositTokenContract.methods.symbol().call({ from: accounts[0] });\n    let rewSymbol = await rewardTokenContract.methods.symbol().call({ from: accounts[0] });\n\n    let parsed = {\n      rewardPerDay: (res[\"_rewardPerSecond\"]*24*60*60/(10**18))\n      , daysLeft: (res[\"_secondsLeft\"]/60/60/24)\n      , deposited: web3.utils.fromWei(res[\"_deposited\"])\n      , pending: web3.utils.fromWei(res[\"_pending\"])\n      , depositTokenBalance: web3.utils.fromWei(depBalance)\n      , rewardTokenBalance: web3.utils.fromWei(rewardBalance)\n      , depSymbol: depSymbol\n      , rewSymbol: rewSymbol }\n\n    setUserDetails(parsed);\n    setIsGlobalLoading(false);\n  }\n\n  function onInputNumberChange(e, f) {\n    const re = new RegExp('^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$')\n    if (e.target.value === '' || re.test(e.target.value)) {\n      f(e.target.value);\n    }\n  }\n\n  function isNonZeroNumber(_input) {\n    return _input !== undefined && _input !== \"\" && parseFloat(_input) !== 0.0;\n  }\n\n  const MainView = () => (\n    <>\n        <br/>\n        <div style={{display: 'flex'}}>\n          <UserPanel />\n          {(accounts && accounts[0].toLowerCase() === owner.toLowerCase())? <AdminPanel /> : undefined}\n        </div>\n    </>\n  );\n\n  const MainViewOrConnectView = () => (\n    <>\n      {web3? <MainView /> : <div><br/><Button onClick={initConnection} disabled={isConnectingToWallet} >Connect</Button></div> }\n    </>\n  )\n\n  const LoadingView = () => (\n    <>\n      <br/>\n      Loading...\n      <br/><br/>\n      <Spinner animation=\"border\" variant=\"light\" />\n\n    </>\n  )\n\n  return (\n    <div className=\"outerApp\">\n      <BlockchainContext.Provider value={{web3, accounts, stakerContract, rewardTokenContract, depositTokenContract}}>\n      <DisplayContext.Provider value={{userDetails, refreshUserDetails, onInputNumberChange, isNonZeroNumber, toast}}>\n        <NavBar />\n        <div className=\"App\">\n          {isGlobalLoading? <LoadingView/> : <MainViewOrConnectView/> }\n        </div>\n      </DisplayContext.Provider>\n      </BlockchainContext.Provider>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss={false}\n        draggable\n        pauseOnHover\n        transition={Slide}\n      />\n    </div>\n    \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}